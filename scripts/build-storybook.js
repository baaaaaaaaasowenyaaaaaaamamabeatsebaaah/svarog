#!/usr/bin/env node

import webpack from 'webpack';
import config from '../.storybook/webpack.prod.config.js';
import fs from 'fs-extra';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const projectRoot = path.resolve(__dirname, '..');
const outputDir = path.resolve(projectRoot, 'storybook-static');

const buildStorybook = async () => {
  try {
    console.log('🏗️  Building Storybook for production...');

    // Ensure output directory exists and is clean
    await fs.ensureDir(outputDir);
    await fs.emptyDir(outputDir);

    // Create webpack compiler
    const compiler = webpack(config);

    // Run webpack build
    const stats = await new Promise((resolve, reject) => {
      compiler.run((err, stats) => {
        if (err) {
          reject(err);
          return;
        }
        resolve(stats);
      });
    });

    // Handle build results
    if (stats.hasErrors()) {
      console.error('❌ Build failed with errors:');
      const info = stats.toJson();
      console.error(info.errors);
      process.exit(1);
    }

    if (stats.hasWarnings()) {
      console.warn('⚠️  Build completed with warnings:');
      const info = stats.toJson();
      console.warn(info.warnings);
    }

    // Copy static assets
    const publicDir = path.resolve(projectRoot, 'public');
    if (await fs.pathExists(publicDir)) {
      await fs.copy(publicDir, outputDir, {
        filter: (src) => !src.endsWith('index.html'), // Skip index.html as it's generated by webpack
      });
    }

    console.log('✅ Storybook build completed successfully!');
    console.log(`📦 Output: ${outputDir}`);

    // Print build stats
    const info = stats.toJson();
    console.log(`📊 Assets: ${info.assets.length} files`);
    console.log(`⏱️  Build time: ${stats.endTime - stats.startTime}ms`);

    process.exit(0);
  } catch (error) {
    console.error('❌ Build failed:', error);
    process.exit(1);
  }
};

buildStorybook();
